function e(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}import{chromium as t}from"playwright";import{loadJson as o,saveFile as i,sleepAsync as r}from"jnu-abc";import*as s from"fs";import*as a from"path";import{spawn as n,execSync as l}from"child_process";import*as c from"net";import*as h from"http";process.env.CHROMIUM_EXECUTABLE_PATH;let g=e=>{let t=[];try{for(let o of s.readdirSync(e))if(o.startsWith("Profile")){let i=a.join(e,o);try{s.statSync(i).isDirectory()&&t.push(i.replace(/\\/g,"/"))}catch(e){continue}}}catch(t){console.warn(`Error reading directory ${e}: ${t.message}`)}return t},m=(e="",t="")=>{if(t||(t=process.env.CHROMIUM_USERDATA_PATH||"/root/.config/google-chrome",console.log(`🔧 프로필 찾기 - 사용할 userDataDir: ${t}`),console.log(`🔧 환경변수 CHROMIUM_USERDATA_PATH: ${process.env.CHROMIUM_USERDATA_PATH}`)),!e)return"Default";try{let i=g(t),r=[];for(let t of i)try{let i=o(`${t}/Preferences`);if(i.account_info&&i.account_info.length>0){for(let o=0;o<i.account_info.length;o++)if(i.account_info[o].email===e){r.push({folder:t.replace(/\\/g,"/").split("/").pop()||"",isPrimary:0===o});break}}}catch(e){continue}let s=r.find(e=>e.isPrimary);if(s)return console.log(`✅ 주계정으로 등록된 프로필 발견: ${s.folder}`),s.folder;if(r.length>0)return console.log(`⚠️ 보조계정으로만 등록됨. 첫 번째 프로필 사용: ${r[0].folder}`),r[0].folder}catch(e){console.warn(`Error finding Chrome profiles: ${e.message}`)}return null};class d{async ensureInitialized(){await this.initPromise}async findAvailablePort(e){try{let t=l('ps aux | grep "remote-debugging-port" | grep -v grep',{encoding:"utf8",stdio:"pipe"});t.trim()&&console.log(`🔍 디버깅 포트로 실행된 Chrome:
${t.trim()}`);let o=l(`lsof -i :${e}-${e+20-1} 2>/dev/null | grep LISTEN || true`,{encoding:"utf8",stdio:"pipe"});o.trim()?console.log(`🔍 현재 사용 중인 포트들:
${o.trim()}`):console.log(`🔍 포트 ${e}-${e+20-1} 범위: 모두 사용 가능`)}catch(e){console.log(`🔍 포트 확인 중 오류 (무시): ${e.message}`)}for(let t=e;t<e+20;t++)try{return await new Promise((e,o)=>{let i=c.createServer();i.listen(t,()=>{i.close(()=>e())}),i.on("error",o)}),console.log(`🔍 사용 가능한 포트 발견: ${t}`),t}catch(e){console.log(`⚠️ 포트 ${t} 사용 중, 다음 포트 시도...`);continue}throw Error(`${e}-${e+20-1} 범위에서 사용 가능한 포트를 찾을 수 없습니다`)}async waitForPort(e,t){let o=Date.now(),i=0;for(console.log(`🔍 Chrome 포트 ${e} 연결 대기 중...`);Date.now()-o<t;){i++;try{await new Promise((t,o)=>{let i=c.createConnection(e,"localhost"),r=setTimeout(()=>{i.destroy(),o(Error("TCP connection timeout"))},2e3);i.on("connect",()=>{clearTimeout(r),i.destroy(),t()}),i.on("error",e=>{clearTimeout(r),o(e)})}),await new Promise((t,o)=>{let i=h.request({hostname:"localhost",port:e,path:"/json/version",method:"GET",timeout:2e3},e=>{200===e.statusCode?t():o(Error(`HTTP status ${e.statusCode}`))});i.on("error",o),i.on("timeout",()=>{i.destroy(),o(Error("HTTP request timeout"))}),i.end()}),console.log(`✅ Chrome 디버깅 포트 ${e} 준비 완료 (시도 ${i}회)`);return}catch(t){i%3==0&&(console.log(`🔄 포트 ${e} 연결 시도 중... (${i}회째, ${Math.round((Date.now()-o)/1e3)}초 경과)`),console.log(`   TCP/HTTP 체크 실패: ${t.message}`)),await new Promise(e=>setTimeout(e,2e3))}}throw console.error(`❌ Chrome 포트 ${e} 연결 실패 (총 ${i}회 시도, ${t/1e3}초 대기)`),Error(`Timeout waiting for Chrome debugging port ${e} after ${i} attempts`)}async initializeBrowser(e){let t=e.profileName??m(e.email,e.userDataDir)??null;if(!t)throw Error(`Profile not found for email: ${e.email}`);let o=e.userDataDir||process.env.CHROMIUM_USERDATA_PATH||"/Users/youchan/Library/Application Support/Google/Chrome",i=a.join(o,t);if(!s.existsSync(i))throw Error(`Chrome 프로필을 찾을 수 없습니다: ${i}`);console.log(`📁 Chrome 프로필: ${i}`);try{await this.initializeWithCDP(e,t,o,i)}catch(t){console.log("⚠️ CDP 연결 실패, Playwright persistent context 방식으로 전환"),await this.initializeWithPersistentContext(e,i)}}async initializeWithCDP(e,o,i,r){console.log("🔗 CDP 연결 방식으로 시도 중...");try{console.log("🔄 기존 Chrome 프로세스 강제 종료 중...");try{l('pkill -TERM -f "Google Chrome"',{stdio:"ignore"}),await new Promise(e=>setTimeout(e,2e3))}catch(e){}try{l('pkill -9 -f "Google Chrome"',{stdio:"ignore"}),await new Promise(e=>setTimeout(e,2e3))}catch(e){}try{for(let e=9222;e<=9230;e++)try{l(`lsof -ti:${e} | xargs kill -9`,{stdio:"ignore"})}catch(e){}await new Promise(e=>setTimeout(e,1e3))}catch(e){}let e=!1;try{l('pgrep -f "Google Chrome"',{encoding:"utf8"}).trim()&&(e=!0,console.log("⚠️ Chrome 프로세스가 아직 실행 중입니다. 추가 대기..."),await new Promise(e=>setTimeout(e,3e3)))}catch(e){console.log("✅ Chrome 프로세스 완전 종료 확인")}e&&console.log("⚠️ Chrome 프로세스가 여전히 실행 중일 수 있습니다. 계속 진행...")}catch(e){console.log("ℹ️ Chrome 프로세스 종료 완료")}let a=await this.findAvailablePort(9222),c=[`--remote-debugging-port=${a}`,"--remote-debugging-address=0.0.0.0",`--user-data-dir=${i}`,`--profile-directory=${o}`,"--no-first-run","--disable-default-apps","--start-maximized","--no-sandbox","--disable-dev-shm-usage","--disable-web-security","--allow-running-insecure-content","--disable-features=VizDisplayCompositor,TranslateUI,Translate","--disable-background-networking","--disable-background-timer-throttling","--disable-renderer-backgrounding","--disable-backgrounding-occluded-windows","--disable-ipc-flooding-protection","--disable-hang-monitor","--disable-prompt-on-repost","--disable-sync","--disable-extensions","--enable-automation","--disable-blink-features=AutomationControlled","--disable-infobars","--allow-origins=*","--disable-client-side-phishing-detection","--disable-component-update","--disable-default-component-extensions","--disable-domain-reliability","--no-default-browser-check","--no-pings",...e.headless?["--headless=new"]:[],...e.arguments||[]],g="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome";if(!s.existsSync(g))throw Error(`Chrome 실행 파일을 찾을 수 없습니다: ${g}`);console.log(`🌐 Chrome 실행 중... (포트: ${a})`),console.log(`🔧 Chrome 경로: ${g}`),console.log(`📁 프로필 경로: ${r}`),console.log(`🔧 Chrome 인수:`,c.slice(0,5).join(" "),"..."),this.chromeProcess=n(g,c,{detached:!1,stdio:["ignore","pipe","pipe"]});let m=!1;this.chromeProcess.on("error",e=>{throw console.error("❌ Chrome 프로세스 시작 실패:",e),e}),this.chromeProcess.on("exit",(e,t)=>{m||console.error(`❌ Chrome 프로세스가 예기치 않게 종료됨 (코드: ${e}, 시그널: ${t})`)}),this.chromeProcess.stderr&&this.chromeProcess.stderr.on("data",e=>{let t=e.toString();t.includes("DevTools listening")&&console.log(`🔍 Chrome DevTools: ${t.trim()}`)}),console.log("⏳ Chrome 시작 대기 중... (10초)"),await new Promise(e=>setTimeout(e,1e4)),await this.waitForPort(a,6e4),m=!0;try{console.log(`🔍 Chrome DevTools API 확인 중... (http://localhost:${a}/json)`);let e=await new Promise((e,t)=>{let o=h.request({hostname:"localhost",port:a,path:"/json",method:"GET",timeout:5e3},t=>{let o="";t.on("data",e=>o+=e),t.on("end",()=>e(o))});o.on("error",t),o.on("timeout",()=>{o.destroy(),t(Error("Request timeout"))}),o.end()}),t=JSON.parse(e);console.log(`📱 Chrome 탭 수: ${t.length}`),t.length>0&&console.log(`🔗 첫 번째 탭: ${t[0].title||"No title"}`)}catch(e){console.log(`⚠️ Chrome DevTools API 확인 실패: ${e.message}`)}console.log(`🔗 Playwright로 Chrome에 연결 중... (http://localhost:${a})`),this.browser=await t.connectOverCDP(`http://localhost:${a}`);let d=this.browser.contexts();this.context=d.length>0?d[0]:await this.browser.newContext();let u=await this.context.pages();u.length>0?this.page=u[0]:this.page=await this.context.newPage(),console.log("✅ Chrome 연결 완료")}async initializeWithPersistentContext(e,o){console.log("🎭 Playwright persistent context 방식으로 시도 중...");try{l('pkill -TERM -f "Google Chrome"',{stdio:"ignore"}),await new Promise(e=>setTimeout(e,2e3))}catch(e){}this.context=await t.launchPersistentContext(o,{headless:e.headless??!1,executablePath:"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",args:["--no-first-run","--disable-default-apps","--disable-sync","--disable-extensions","--disable-background-networking","--disable-background-timer-throttling","--disable-renderer-backgrounding","--disable-backgrounding-occluded-windows","--disable-features=TranslateUI,VizDisplayCompositor","--no-sandbox","--disable-dev-shm-usage",...e.arguments||[]]}),this.browser=this.context.browser();let i=this.context.pages();i.length>0?this.page=i[0]:this.page=await this.context.newPage(),console.log("✅ Playwright persistent context 연결 완료")}async getFullSize(){await this.ensureInitialized();let e=0,t=0;for(;;){let{viewportHeight:o,documentHeight:i,scrollY:r}=await this.page.evaluate(()=>{let e=globalThis,t=e.document;return{viewportHeight:e.innerHeight,documentHeight:Math.max(t.documentElement.scrollHeight,t.body.scrollHeight,t.documentElement.offsetHeight,t.body.offsetHeight),scrollY:e.scrollY||e.pageYOffset}});if(i===e){if(++t>=3)break}else t=0,e=i;let s=Math.min(r+800,i-o);if(r>=i-o)break;await this.page.evaluate(e=>{globalThis.scrollTo(0,e)},s),await this.page.waitForTimeout(2e3);try{await this.page.waitForFunction(e=>{let t=globalThis.document;return Math.max(t.documentElement.scrollHeight,t.body.scrollHeight,t.documentElement.offsetHeight,t.body.offsetHeight)>=e},i,{timeout:3e3})}catch(e){}}return await this.page.evaluate(()=>{let e=globalThis.document;return{width:Math.max(e.documentElement.scrollWidth,e.body.scrollWidth,e.documentElement.offsetWidth,e.body.offsetWidth),height:Math.max(e.documentElement.scrollHeight,e.body.scrollHeight,e.documentElement.offsetHeight,e.body.offsetHeight)}})}async _getFullScreenshot(){try{let{width:e,height:t}=await this.getFullSize();return await this.page.setViewportSize({width:e,height:t}),await this.page.screenshot({fullPage:!0,type:"png"})}catch(e){throw console.error("스크린샷 촬영 중 오류 발생:",e),e}}async getFullScreenshot(){try{return(await this._getFullScreenshot()).toString("base64")}finally{await this.close()}}async saveScreenshot(e){try{let t=await this._getFullScreenshot();i(e,t.toString("base64"),{encoding:"base64"})}finally{await this.close()}}async goto(e){await this.ensureInitialized(),await this.page.goto(e,{waitUntil:"domcontentloaded"})}async wait(e,t={}){await this.ensureInitialized();let{timeout:o=1e4,state:i="attached"}=t;return this.page.waitForSelector(e,{timeout:o,state:i})}async findElements(e){return await this.ensureInitialized(),this.page.locator(e)}async findElement(e){return await this.ensureInitialized(),this.page.locator(e).first()}async getPageSource(){return await this.ensureInitialized(),await this.page.content()}async getElementHtml(e){let t=await this.findElement(e);return await t.innerHTML()}async click(e){let t=await this.findElement(e);await t.scrollIntoViewIfNeeded(),await r(1e3),await t.click()}async getText(e){let t=await this.findElement(e);return await t.textContent()}async getAttribute(e,t){let o=await this.findElement(e);return await o.getAttribute(t)}async sendKeys(e,t){let o=await this.findElement(e);await o.fill(t)}async saveElementScreenshot(e,t){let o=await this.findElement(e);i(t,(await o.screenshot({type:"png"})).toString("base64"),{encoding:"base64"})}async executeScript(e,...t){return await this.ensureInitialized(),this.page.evaluate(e,...t)}async scrollIntoView(e){let t=await this.findElement(e);await t.scrollIntoViewIfNeeded()}async close(){if(await this.ensureInitialized(),this.browser&&(await this.browser.close(),console.log("✅ Playwright 연결 종료")),this.chromeProcess)try{process.kill(-this.chromeProcess.pid),console.log("✅ Chrome 프로세스 종료")}catch(e){console.log("ℹ️ Chrome 프로세스 종료 실패 (이미 종료되었을 수 있음)")}}constructor(t={headless:!1,profileName:"",email:"",userDataDir:"",arguments:[]}){e(this,"browser",void 0),e(this,"context",void 0),e(this,"page",void 0),e(this,"initPromise",void 0),e(this,"chromeProcess",void 0),this.initPromise=this.initializeBrowser(t)}}export{d as PlaywrightChromeProfile,m as getPlaywrightChromeProfileByEmail};
function e(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}import{chromium as t}from"playwright";import{loadJson as i,saveFile as o,sleepAsync as r}from"jnu-abc";import*as a from"fs";import*as s from"path";import{execSync as n}from"child_process";import*as l from"os";let c=e=>{let t=[];try{for(let i of a.readdirSync(e))if(i.startsWith("Profile")){let o=s.join(e,i);try{a.statSync(o).isDirectory()&&t.push(o.replace(/\\/g,"/"))}catch(e){continue}}}catch(t){console.warn(`Error reading directory ${e}: ${t.message}`)}return t},h=(e="",t="")=>{if(t||(t=process.env.CHROMIUM_USERDATA_PATH||"/root/.config/google-chrome"),!e)return"Default";try{let o=c(t),r=[];for(let t of o)try{let o=i(`${t}/Preferences`);if(o.account_info&&o.account_info.length>0){for(let i=0;i<o.account_info.length;i++)if(o.account_info[i].email===e){r.push({folder:t.replace(/\\/g,"/").split("/").pop()||"",isPrimary:0===i});break}}}catch(e){continue}let a=r.find(e=>e.isPrimary);if(a)return console.log(`✅ 주계정으로 등록된 프로필 발견: ${a.folder}`),a.folder;if(r.length>0)return console.log(`⚠️ 보조계정으로만 등록됨. 첫 번째 프로필 사용: ${r[0].folder}`),r[0].folder}catch(e){console.warn(`Error finding Chrome profiles: ${e.message}`)}return null},g=e=>{try{let t=l.tmpdir(),i=s.join(t,e);if(a.existsSync(i)){let e=s.join(i,"Default");if(a.existsSync(e))return console.log(`🔍 기존 임시 프로필 발견: ${i}`),i}return null}catch(e){return console.log(`⚠️  기존 임시 프로필 검색 실패: ${e.message}`),null}},f=(e,t,i)=>{console.log("📋 프로필 데이터를 복사합니다...");let o=s.join(i,e);a.existsSync(t)||a.mkdirSync(t,{recursive:!0});let r=0;for(let e of["Cookies","Login Data","Preferences","Secure Preferences","Web Data","History","Bookmarks","Google Profile.ico","First Run","Local State","Network Action Predictor","Network Persistent State","Sync Data","TransportSecurity","Visited Links","Token Service","Account Manager","Login Data For Account","Network","Profile Avatar","Client Side Phishing Model","Safe Browsing","Session","Shortcuts","Top Sites","Trusted Vault","User Data"]){let i=s.join(o,e),n=s.join(t,e);if(a.existsSync(i))try{a.copyFileSync(i,n),r++,console.log(`   ✅ ${e} 복사됨`)}catch(t){console.log(`   ⚠️  ${e} 복사 실패: ${t.message}`)}}for(let e of["Local Storage","Session Storage","IndexedDB","databases","Sync Data","blob_storage","File System","Platform Notifications"]){let i=s.join(o,e),n=s.join(t,e);if(a.existsSync(i))try{a.cpSync(i,n,{recursive:!0,force:!0}),r++,console.log(`   ✅ ${e}/ 복사됨`)}catch(t){console.log(`   ⚠️  ${e}/ 복사 실패: ${t.message}`)}}return console.log(`   📊 총 ${r}개 항목이 복사되었습니다.`),r>0};class m{async ensureInitialized(){await this.initPromise}async initializeBrowser(e){console.log("🎭 Playwright persistent context 방식으로 Chrome 실행 (CDP 없음)");let i=e.profileName??h(e.email,e.userDataDir)??null;if(!i)throw Error(`Profile not found for email: ${e.email}`);try{n('pkill -TERM -f "Google Chrome"',{stdio:"ignore"}),console.log("🔄 기존 Chrome 프로세스 종료"),await new Promise(e=>setTimeout(e,2e3))}catch(e){}let o=e.userDataDir||process.env.CHROMIUM_USERDATA_PATH||"/Users/youchan/Library/Application Support/Google/Chrome",r=s.join(o,i);if(!a.existsSync(r))throw Error(`Chrome 프로필을 찾을 수 없습니다: ${r}`);console.log(`📁 원본 Chrome 프로필: ${r}`);let c=process.env.CHROMIUM_EXECUTABLE_PATH||("win32"===process.platform?"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe":"darwin"===process.platform?"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome":"/usr/bin/google-chrome");if(!a.existsSync(c))throw Error(`Chrome 실행 파일을 찾을 수 없습니다: ${c}`);console.log(`🔧 Chrome 실행 파일: ${c}`);let m=o,u=i;if(e.useTempProfile){let e=i.replace(/\s/g,"_").replace(/[/\\]/g,"_"),t=`chrome-profile-${e}`,r=g(t);if(r)console.log(`♻️  기존 임시 프로필을 재사용합니다: ${r}`),this.tempUserDataDir=r,m=this.tempUserDataDir,u="Default";else{this.tempUserDataDir=s.join(l.tmpdir(),t);let e=s.join(this.tempUserDataDir,"Default");console.log(`🆕 새 임시 프로필을 생성합니다: ${this.tempUserDataDir}`),f(i,e,o)||console.log("⚠️  프로필 데이터 복사에 실패했습니다. 빈 프로필로 진행합니다."),m=this.tempUserDataDir,u="Default"}}console.log(`🔧 사용할 프로필 경로: ${s.join(m,u)}`),this.context=await t.launchPersistentContext(m,{headless:e.headless??!1,executablePath:c,args:[`--profile-directory=${u}`,"--no-first-run","--disable-default-apps","--disable-sync","--disable-extensions","--disable-background-networking","--disable-background-timer-throttling","--disable-renderer-backgrounding","--disable-backgrounding-occluded-windows","--disable-features=TranslateUI,VizDisplayCompositor","--no-sandbox","--disable-dev-shm-usage","--start-maximized",...e.arguments||[]]}),this.browser=this.context.browser();let d=this.context.pages();d.length>0?this.page=d[0]:this.page=await this.context.newPage(),console.log("✅ Playwright persistent context 연결 완료 (CDP 없음)")}async getFullSize(){await this.ensureInitialized();let e=0,t=0;for(;;){let{viewportHeight:i,documentHeight:o,scrollY:r}=await this.page.evaluate(()=>{let e=globalThis,t=e.document;return{viewportHeight:e.innerHeight,documentHeight:Math.max(t.documentElement.scrollHeight,t.body.scrollHeight,t.documentElement.offsetHeight,t.body.offsetHeight),scrollY:e.scrollY||e.pageYOffset}});if(o===e){if(++t>=3)break}else t=0,e=o;let a=Math.min(r+800,o-i);if(r>=o-i)break;await this.page.evaluate(e=>{globalThis.scrollTo(0,e)},a),await this.page.waitForTimeout(2e3);try{await this.page.waitForFunction(e=>{let t=globalThis.document;return Math.max(t.documentElement.scrollHeight,t.body.scrollHeight,t.documentElement.offsetHeight,t.body.offsetHeight)>=e},o,{timeout:3e3})}catch(e){}}return await this.page.evaluate(()=>{let e=globalThis.document;return{width:Math.max(e.documentElement.scrollWidth,e.body.scrollWidth,e.documentElement.offsetWidth,e.body.offsetWidth),height:Math.max(e.documentElement.scrollHeight,e.body.scrollHeight,e.documentElement.offsetHeight,e.body.offsetHeight)}})}async _getFullScreenshot(){try{let{width:e,height:t}=await this.getFullSize();return await this.page.setViewportSize({width:e,height:t}),await this.page.screenshot({fullPage:!0,type:"png"})}catch(e){throw console.error("스크린샷 촬영 중 오류 발생:",e),e}}async getFullScreenshot(){try{return(await this._getFullScreenshot()).toString("base64")}finally{await this.close()}}async saveScreenshot(e){try{let t=await this._getFullScreenshot();o(e,t.toString("base64"),{encoding:"base64"})}finally{await this.close()}}async goto(e){await this.ensureInitialized(),await this.page.goto(e,{waitUntil:"domcontentloaded"})}async wait(e,t={}){await this.ensureInitialized();let{timeout:i=1e4,state:o="attached"}=t;return this.page.waitForSelector(e,{timeout:i,state:o})}async findElements(e){return await this.ensureInitialized(),this.page.locator(e)}async findElement(e){return await this.ensureInitialized(),this.page.locator(e).first()}async getPageSource(){return await this.ensureInitialized(),await this.page.content()}async getElementHtml(e){let t=await this.findElement(e);return await t.innerHTML()}async click(e){let t=await this.findElement(e);await t.scrollIntoViewIfNeeded(),await r(1e3),await t.click()}async getText(e){let t=await this.findElement(e);return await t.textContent()}async getAttribute(e,t){let i=await this.findElement(e);return await i.getAttribute(t)}async sendKeys(e,t){let i=await this.findElement(e);await i.fill(t)}async saveElementScreenshot(e,t){let i=await this.findElement(e);o(t,(await i.screenshot({type:"png"})).toString("base64"),{encoding:"base64"})}async executeScript(e,...t){return await this.ensureInitialized(),this.page.evaluate(e,...t)}async scrollIntoView(e){let t=await this.findElement(e);await t.scrollIntoViewIfNeeded()}async close(){await this.ensureInitialized(),this.context&&(await this.context.close(),console.log("✅ Playwright persistent context 종료")),this.tempUserDataDir&&a.existsSync(this.tempUserDataDir)&&(console.log(`💾 로그인 상태 유지를 위해 임시 프로필을 보존합니다: ${this.tempUserDataDir}`),console.log("   다음 실행 시 이 프로필이 재사용됩니다."))}constructor(t={headless:!1,profileName:"",email:"",userDataDir:"",arguments:[],useTempProfile:!1}){e(this,"browser",void 0),e(this,"context",void 0),e(this,"page",void 0),e(this,"initPromise",void 0),e(this,"tempUserDataDir",void 0),this.initPromise=this.initializeBrowser(t)}}export{m as PlaywrightChromeProfile,h as getPlaywrightChromeProfileByEmail,f as copyProfileData,g as findExistingTempProfile};